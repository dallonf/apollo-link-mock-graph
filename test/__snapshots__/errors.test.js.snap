// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`fails on non-matching fragments without possibleTypes config 1`] = `[Error: currentUser: Can't resolve fragment because its type (PremiumUser) might not match the object's type (FreeUser). In order to handle union and interface types, you must pass \`possibleTypes\` when creating MockGraphLink. See https://github.com/dallonf/apollo-link-mock-graph/blob/master/README.md for details.]`;

exports[`fails on non-matching fragments without possibleTypes config 2`] = `
Array [
  Array [
    Object {
      "fragmentName": undefined,
      "fragmentType": "PremiumUser",
      "message": "currentUser: Can't resolve fragment because its type (PremiumUser) might not match the object's type (FreeUser). In order to handle union and interface types, you must pass \`possibleTypes\` when creating MockGraphLink. See https://github.com/dallonf/apollo-link-mock-graph/blob/master/README.md for details.",
      "objectType": "FreeUser",
      "path": Array [
        "currentUser",
      ],
      "type": "unionInterfaceTypes",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "currentUser",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "name",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "directives": Array [],
                    "kind": "InlineFragment",
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "nextPaymentDate",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "__typename",
                          },
                        },
                      ],
                    },
                    "typeCondition": Object {
                      "kind": "NamedType",
                      "name": Object {
                        "kind": "Name",
                        "value": "PremiumUser",
                      },
                    },
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 146,
      "start": 0,
    },
  },
]
`;

exports[`handles a lot of errors 1`] = `
[Error: userById({"id":"123"}).id: Field is missing from mock graph
userById({"id":"123"}).firstName: Field is missing from mock graph
userById({"id":"123"}).lastName: Field is missing from mock graph
userById({"id":"123"}).posts[0].id: Field is missing from mock graph
userById({"id":"123"}).posts[0].message: Field is missing from mock graph
userById({"id":"123"}).posts[0].date: Field is missing from mock graph
userById({"id":"123"}).posts[0].likes: Field is missing from mock graph
userById({"id":"123"}).posts[0].__typename: Field is missing from mock graph
userById({"id":"123"}).posts[1].id: Field is missing from mock graph
userById({"id":"123"}).posts[1].message: Field is missing from mock graph
userById({"id":"123"}).posts[1].date: Field is missing from mock graph
userById({"id":"123"}).posts[1].likes: Field is missing from mock graph
userById({"id":"123"}).posts[1].__typename: Field is missing from mock graph
userById({"id":"123"}).posts[2].id: Field is missing from mock graph
userById({"id":"123"}).posts[2].message: Field is missing from mock graph
userById({"id":"123"}).posts[2].date: Field is missing from mock graph
userById({"id":"123"}).posts[2].likes: Field is missing from mock graph
userById({"id":"123"}).posts[2].__typename: Field is missing from mock graph
userById({"id":"123"}).__typename: Field is missing from mock graph]
`;

exports[`handles a lot of errors 2`] = `
Array [
  Array [
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).id: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "id",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).firstName: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "firstName",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).lastName: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "lastName",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[0].id: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        0,
        "id",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[0].message: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        0,
        "message",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[0].date: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        0,
        "date",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[0].likes: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        0,
        "likes",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[0].__typename: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        0,
        "__typename",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[1].id: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        1,
        "id",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[1].message: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        1,
        "message",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[1].date: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        1,
        "date",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[1].likes: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        1,
        "likes",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[1].__typename: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        1,
        "__typename",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[2].id: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        2,
        "id",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[2].message: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        2,
        "message",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[2].date: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        2,
        "date",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[2].likes: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        2,
        "likes",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).posts[2].__typename: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "posts",
        2,
        "__typename",
      ],
      "type": "missing",
    },
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).__typename: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "__typename",
      ],
      "type": "missing",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "QueryWithErrors",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "value": Object {
                    "block": false,
                    "kind": "StringValue",
                    "value": "123",
                  },
                },
              ],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "userById",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "firstName",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "lastName",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "posts",
                    },
                    "selectionSet": Object {
                      "kind": "SelectionSet",
                      "selections": Array [
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "id",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "message",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "date",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "alias": undefined,
                          "arguments": Array [],
                          "directives": Array [],
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "likes",
                          },
                          "selectionSet": undefined,
                        },
                        Object {
                          "kind": "Field",
                          "name": Object {
                            "kind": "Name",
                            "value": "__typename",
                          },
                        },
                      ],
                    },
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 207,
      "start": 0,
    },
  },
]
`;

exports[`handles an exception in a resolver 1`] = `[Error: userById({"id":"123"}): Error from resolver: args.explode is not a function]`;

exports[`handles an exception in a resolver 2`] = `
Array [
  Array [
    Object {
      "args": Object {
        "id": "123",
      },
      "error": [TypeError: args.explode is not a function],
      "message": "userById({\\"id\\":\\"123\\"}): Error from resolver: args.explode is not a function",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
      ],
      "type": "resolver",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "value": Object {
                    "block": false,
                    "kind": "StringValue",
                    "value": "123",
                  },
                },
              ],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "userById",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "name",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 89,
      "start": 0,
    },
  },
]
`;

exports[`reports a field that needs to be mocked with a function 1`] = `[Error: userById({"id":"123"}): This field received args and thus must be mocked as a function.]`;

exports[`reports a field that needs to be mocked with a function 2`] = `
Array [
  Array [
    Object {
      "args": Object {
        "id": "123",
      },
      "message": "userById({\\"id\\":\\"123\\"}): This field received args and thus must be mocked as a function.",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
      ],
      "type": "fnRequired",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "value": Object {
                    "block": false,
                    "kind": "StringValue",
                    "value": "123",
                  },
                },
              ],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "userById",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "name",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 89,
      "start": 0,
    },
  },
]
`;

exports[`reports a fragment on an object without a typename 1`] = `
[Error: currentUser: Can't resolve fragment UserView because __typename is missing from the mock graph
currentUser.__typename: Field is missing from mock graph]
`;

exports[`reports a fragment on an object without a typename 2`] = `
Array [
  Array [
    Object {
      "fragmentName": "UserView",
      "message": "currentUser: Can't resolve fragment UserView because __typename is missing from the mock graph",
      "path": Array [
        "currentUser",
      ],
      "type": "noTypename",
    },
    Object {
      "message": "currentUser.__typename: Field is missing from mock graph",
      "path": Array [
        "currentUser",
        "__typename",
      ],
      "type": "missing",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "currentUser",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "directives": Array [],
                    "kind": "FragmentSpread",
                    "name": Object {
                      "kind": "Name",
                      "value": "UserView",
                    },
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
      Object {
        "directives": Array [],
        "kind": "FragmentDefinition",
        "name": Object {
          "kind": "Name",
          "value": "UserView",
        },
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "name",
              },
              "selectionSet": undefined,
            },
            Object {
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "__typename",
              },
            },
          ],
        },
        "typeCondition": Object {
          "kind": "NamedType",
          "name": Object {
            "kind": "Name",
            "value": "User",
          },
        },
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 138,
      "start": 0,
    },
  },
]
`;

exports[`reports a function that returns undefined 1`] = `[Error: userById({"id":"123"}): Mock resolver returned undefined; did you mean to return null?]`;

exports[`reports a function that returns undefined 2`] = `
Array [
  Array [
    Object {
      "args": Object {
        "id": "123",
      },
      "message": "userById({\\"id\\":\\"123\\"}): Mock resolver returned undefined; did you mean to return null?",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
      ],
      "type": "fnReturnUndefined",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "value": Object {
                    "block": false,
                    "kind": "StringValue",
                    "value": "123",
                  },
                },
              ],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "userById",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "name",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 89,
      "start": 0,
    },
  },
]
`;

exports[`reports a missing field in the mock 1`] = `[Error: userById({"id":"123"}).name: Field is missing from mock graph]`;

exports[`reports a missing field in the mock 2`] = `
Array [
  Array [
    Object {
      "message": "userById({\\"id\\":\\"123\\"}).name: Field is missing from mock graph",
      "path": Array [
        "userById({\\"id\\":\\"123\\"})",
        "name",
      ],
      "type": "missing",
    },
  ],
  Object {
    "definitions": Array [
      Object {
        "directives": Array [],
        "kind": "OperationDefinition",
        "name": Object {
          "kind": "Name",
          "value": "MyQuery",
        },
        "operation": "query",
        "selectionSet": Object {
          "kind": "SelectionSet",
          "selections": Array [
            Object {
              "alias": undefined,
              "arguments": Array [
                Object {
                  "kind": "Argument",
                  "name": Object {
                    "kind": "Name",
                    "value": "id",
                  },
                  "value": Object {
                    "block": false,
                    "kind": "StringValue",
                    "value": "123",
                  },
                },
              ],
              "directives": Array [],
              "kind": "Field",
              "name": Object {
                "kind": "Name",
                "value": "userById",
              },
              "selectionSet": Object {
                "kind": "SelectionSet",
                "selections": Array [
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "id",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "alias": undefined,
                    "arguments": Array [],
                    "directives": Array [],
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "name",
                    },
                    "selectionSet": undefined,
                  },
                  Object {
                    "kind": "Field",
                    "name": Object {
                      "kind": "Name",
                      "value": "__typename",
                    },
                  },
                ],
              },
            },
          ],
        },
        "variableDefinitions": Array [],
      },
    ],
    "kind": "Document",
    "loc": Object {
      "end": 89,
      "start": 0,
    },
  },
]
`;
